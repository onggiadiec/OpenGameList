{"version":3,"sources":["item.service.ts"],"names":["ItemService","http","this","baseUrl","prototype","getLatest","num","url","get","map","response","json","catch","handleError","getMostViewed","getRandom","id","Error","res","error","console","Observable_1","Observable","throw","__decorate","core_1","Injectable","exports_1"],"mappings":"66BAMAA,YAAA,WACI,QAAAA,aACYC,MAAAC,KAAAD,KAAAA,KAGJC,KAAAC,QAAU,aAmDtB,MAhDIH,aAAAI,UAAAC,UAAA,SAAUC,KACN,GAAIC,KAAML,KAAKC,QAAU,YAIzB,OAHW,OAAPG,MACAC,KAAOD,KAEJJ,KAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAIpBb,YAAAI,UAAAU,cAAA,SAAcR,KACV,GAAIC,KAAML,KAAKC,QAAU,gBAIzB,OAHW,OAAPG,MACAC,KAAOD,KAEJJ,KAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAIpBb,YAAAI,UAAAW,UAAA,SAAUT,KACN,GAAIC,KAAML,KAAKC,QAAU,YAIzB,OAHW,OAAPG,MACAC,KAAOD,KAEJJ,KAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAC,UAAY,MAAAA,UAASC,SACzBC,MAAMV,KAAKW,cAIpBb,YAAAI,UAAAI,IAAA,SAAIQ,IACA,GAAU,MAANA,GACA,KAAM,IAAIC,OAAM,kBAEpB,IAAIV,KAAML,KAAKC,QAAUa,EACzB,OAAOd,MAAKD,KAAKO,IAAID,KAChBE,IAAI,SAAAS,KAAO,MAAMA,KAAIP,SACrBC,MAAMV,KAAKW,cAGZb,YAAAI,UAAAS,YAAR,SAAoBM,OAEhB,MADAC,SAAQD,MAAMA,OACPE,aAAAC,WAAWC,MAAMJ,MAAMR,OAAOQ,OAAS,iBAtDtDnB,YAAAwB,YAACC,OAAAC,4EACDC,UAAA,cAAA3B","file":"item.service.js","sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Http, Response } from \"@angular/http\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Item } from \"./item\";\r\n\r\n@Injectable()\r\nexport class ItemService {\r\n    constructor(\r\n        private http: Http\r\n    ){}\r\n\r\n    private baseUrl = \"api/items/\";  // web api URL\r\n\r\n    // calls the GET: api/items/GetLatest/{n}\r\n    getLatest(num?: number) {\r\n        var url = this.baseUrl + \"GetLatest/\";\r\n        if (num != null) { \r\n            url += num;\r\n        }\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the GET: /api/items/GetMostViewed/{n}\r\n    getMostViewed(num?: number) {\r\n        var url = this.baseUrl + \"GetMostViewed/\";\r\n        if (num != null) {\r\n            url += num;\r\n        }\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the GET: /api/items/GetRandom/{n}\r\n    getRandom(num?: number) {\r\n        var url = this.baseUrl + \"GetRandom/\";\r\n        if (num != null) {\r\n            url += num;\r\n        }\r\n        return this.http.get(url)\r\n            .map(response => response.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    // calls the GET: /api/items/{id}\r\n    get(id: number) {\r\n        if (id == null) {\r\n            throw new Error(\"id is required.\");\r\n        }\r\n        var url = this.baseUrl + id;\r\n        return this.http.get(url)\r\n            .map(res => <Item>res.json())\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    private handleError(error: Response) {\r\n        console.error(error);\r\n        return Observable.throw(error.json().error || \"Server error\");\r\n    }\r\n\r\n} "]}